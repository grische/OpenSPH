#pragma once

#include "io/Path.h"
#include "math/rng/Rng.h"
#include "objects/containers/FlatSet.h"

NAMESPACE_SPH_BEGIN

/// \brief Object generating unique paths.
///
/// Unique paths are generated by appending _001, _002, etc. to the file name. In case more than 999 unique
/// paths are requested from given path, it throws an exception.
class UniquePathManager : public Noncopyable {
private:
    FlatSet<Path> usedPaths;

public:
    /// \brief Generates a unique path, based on given input path.
    ///
    /// The generated file may or may not exist on filesystem, the function only ensures it returns a
    /// different path every time. If more multiple manager objects are used, they may generate equal paths.
    /// The function is NOT thread safe, it has to be explicitly synchronized.
    Path getPath(const Path& expected);
};

/// \brief Object generating unique names.
///
/// Similar to \ref UniquePathManager, but does not include file extensions.
class UniqueNameManager {
private:
    FlatSet<String> names;

public:
    UniqueNameManager() = default;

    explicit UniqueNameManager(ArrayView<const String> initial);

    String getName(const String& name);
};

/// \brief Generates random file names.
///
/// Object generates random paths, given a parent directory. It has no seed, so each constructed object
/// generates a different sequence of random paths. This does not create the file, only returns a usable path;
/// it is guaranteed that no file with returned path exist, provided no other thread or process is creating
/// random file names at the same time.
class RandomPathManager : public Noncopyable {
private:
    UniformRng rng;

    static char chars[];

public:
    RandomPathManager()
        : rng(std::random_device{}()) {}

    /// \brief Generates a new random path.
    ///
    /// \param extension Optional extension of the generated path. If empty, the path has no extension.
    Path getPath(const String& extension = "");
};


NAMESPACE_SPH_END
